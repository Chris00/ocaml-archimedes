(*                                                              -*-tuareg-*- *)
open Printf

(* A list of couples (test_name, description, function_to_run). *)
let alltests = [ $(tests) ]

let backends = ref []
let cairo out ext () =
  backends := (fun fname -> ["cairo"; out; sprintf "%s.%s" fname ext]) :: !backends
let tikz () =
  backends := (fun fname -> ["tikz"; sprintf "%s.tex" fname]) :: !backends
let graphics () =
  backends := (fun _ -> ["graphics"; "hold"]) :: !backends

let list_tests () =
  List.iter (fun (name,_,_) -> Format.printf "%s@ " name) alltests;
  exit 0

let specs = Arg.align [
  "--ps",  Arg.Unit(cairo "PS" "ps"), " activate PS (cairo) output";
  "--pdf", Arg.Unit(cairo "PDF" "pdf"), " activate PDF (cairo) output";
  "--png", Arg.Unit(cairo "PNG" "png"), " activate PNG (cairo) output";
  "--svg", Arg.Unit(cairo "SVG" "svg"), " activate SVG (cairo) output";
  "--tex", Arg.Unit tikz, " activate LaTeX (TikZ) output";
  "--graphics", Arg.Unit graphics, " activate graphics output (done if no \
    option is given)";
  "--tests", Arg.Unit list_tests, " list all possible tests and stop";
]

let tests =
  let usage = "tests [option1] [option2] ...\n\
    where an option is a test name or one of the following:" in
  let tests = ref [] in
  Arg.parse specs (fun t -> tests := t :: !tests) usage;
  if !backends = [] then cairo "PNG" "png" ();
  if !tests = [] then alltests
  else (
    let add acc t =
      try List.find (fun (name,_,_) -> name = t) alltests :: acc
      with Not_found -> printf "Test not found: %s\n" t; acc in
    List.fold_left add [] !tests
  )

let () =
  let fail_exn = ref 0 in
  List.iter (fun (name, description, test) ->
    List.iter (fun b ->
      Format.printf "@[<2>%s@;- %s@]@." name description;
      try test(b name)
      with e ->
        let bt = Printexc.get_backtrace () in
        incr fail_exn;
        Format.printf "  %s@.%s" (Printexc.to_string e) bt;
    ) !backends
  ) tests;
  if !fail_exn > 0 then
    printf "WARNING: %i test%s failed with an exception.\n"
      !fail_exn (if !fail_exn > 1 then "s" else "")
